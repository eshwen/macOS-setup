{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"macOS-setup","text":"<p>Files and scripts useful for setting up a new Mac. Helps keep synchronisation between my different Mac computers and offers a backup.</p> <p>Check out the docs by clicking the badge above.</p>"},{"location":"see-also/","title":"See Also","text":"<ul> <li>Adding ssh keys to GitHub: https://help.github.com/en/enterprise/2.16/user/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</li> <li>Emacs reference card: https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf</li> <li>Sort all folders in Finder alphabetically: https://apple.stackexchange.com/questions/22717/how-to-set-arrange-by-for-all-the-folders-in-the-finder</li> <li>Mac glyphs in unicode/HTML: https://apple.stackexchange.com/questions/55727/where-can-i-find-the-unicode-symbols-for-mac-functional-keys-command-shift-e</li> </ul>"},{"location":"getting_started/getting-started/","title":"Installation","text":"<p>1) Make a directory within the home folder called <code>GitHub</code> to store repos:</p> <pre><code>```sh\nmkdir $HOME/GitHub\n```\n</code></pre> <p>2) Download GitHub Desktop from https://desktop.github.com/, then open it and sign in</p> <p>3) On this page, hit the Code button, followed by Open with GitHub Desktop. If prompted for a directory, store the repo in <code>/Users/eshwen/GitHub/macOS-setup</code></p> <p>4) Copy over the profile/configuration settings:</p> <pre><code>```sh\nrepo_dir=\"$HOME/GitHub/macOS-setup\"\ncd $repo_dir\ncat inputrc &gt;&gt; $HOME/.inputrc\n```\n</code></pre> <p>5) Strip out any unnecessary stuff from these new files</p>"},{"location":"mac_utilities/mac-utilities/","title":"Mac utilities","text":""},{"location":"mac_utilities/mac-utilities/#time-machine","title":"Time Machine","text":"<p>Time Machine is a great backup utility, but it's not perfect. One of the drawbacks is that - from the GUI - it's not easy to create complex exclusions from the backup.</p> <p>Since I do a lot of Python development, I don't want to back up virtual environments, etc. To exclude these, you can use <code>find</code> to search for the directories and pipe them to <code>tmutil</code>, e.g.,</p> <pre><code>find `pwd` -maxdepth 3 -type d -name '.venv' | xargs -n 1 tmutil addexclusion\n</code></pre> <p>to exclude the <code>.venv</code> directory.</p> <p>There's also a tmignore tool to automatically exclude files from your <code>.gitignore</code>, but that doesn't appear to be maintained anymore.</p>"},{"location":"mac_utilities/mac-utilities/#system-sounds","title":"System sounds","text":"<p>I don't like some of the system sound effects in Big Sur. I've uploaded Basso and Glass from Catalina. To use them as system sounds, do</p> <pre><code>mkdir ~/Library/Sounds\ncp Basso_Catalina.aiff Glass_Catalina.aiff ~/Library/Sounds/\n</code></pre> <p>Then, in System Preferences -&gt; Sound, they should be available.</p>"},{"location":"mac_utilities/mac-utilities/#configuration-options","title":"Configuration options","text":"<ul> <li>Enable 3-finger drag on the trackpad</li> <li>Go to System Preferences -&gt; Accessibility -&gt; Pointer Control</li> <li>Under Mouse &amp; Trackpad -&gt; Trackpad Options... select three finger drag from the dropdown menu and tick the checkbox</li> <li>Order everything in every directory within Finder alphabetically</li> <li>In the menu bar in Finder, go to View -&gt; Show View Options</li> <li>Ensure Group By and Sort By have the value Name and click Use As Defaults</li> </ul>"},{"location":"mac_utilities/mac-utilities/#useful-shortcuts","title":"Useful shortcuts","text":"<ul> <li>Forward delete: fn + \u232b</li> <li>Show inspector (so Get Info shows for active file): \u2318 + \u2325 + i</li> <li>Toggle to show/hide hidden files and directories (i.e., prefixed with <code>.</code>): \u2318 + \u21e7 + .</li> </ul>"},{"location":"programs/cli/","title":"Command Line Interface (CLI)","text":""},{"location":"programs/cli/#rosetta-2","title":"Rosetta 2","text":"<p>Rosetta 2 is Apple's utility to translate Intel-based (x86) apps, so they're Apple Silicon-compatible. It's no longer bundled with macOS as of Monterey. If I try to open an x86 app, I'll be prompted to install it. Otherwise, I can type in the Terminal</p> <pre><code>softwareupdate --install-rosetta\n</code></pre>"},{"location":"programs/cli/#shell","title":"Shell","text":"<p><code>zsh</code> is the default shell in macOS as of Catalina.</p>"},{"location":"programs/cli/#changing-shells","title":"Changing shells","text":"<p>To change shells, do</p> <pre><code>chsh -s &lt;executable_path&gt;\n</code></pre> <p>where <code>&lt;executable_path&gt;</code> is the path to the shell executable. For example, to change to <code>bash</code>, do</p> <pre><code>chsh -s /bin/bash\n</code></pre> <p>If installing a new shell with Homebrew (see above), the executable paths should automatically symlink. So finding the exact path shouldn't be necessary.</p> <p>If changing the shell, log out and log back in to ensure it takes effect.</p>"},{"location":"programs/cli/#extensions","title":"Extensions","text":"<p>Amazon Q is an decent tool for managing terminal-related stuff: appearance, autocomplete, shell profiles, settings, plugins, etc. It's similar to Oh My Bash/Zsh, but more modern and with a GUI. And it works with <code>bash</code>, <code>zsh</code>, and <code>fish</code>.</p> <p>Install it with Homebrew (see above). Then, open it and follow the instructions to set it up. It should automatically detect the shell and prompt anything else it needs.</p> <p>Other things to install:</p> <ul> <li>Oh My Zsh</li> <li>zsh-autoswitch-virtualenv<ul> <li>Follow the specific instructions to integrate with Oh My Zsh</li> </ul> </li> <li>spaceship-prompt<ul> <li>Follow the specific instructions to integrate with Oh My Zsh</li> </ul> </li> <li>zsh-syntax-highlighting<ul> <li>With <code>brew install zsh-syntax-highlighting</code></li> </ul> </li> </ul>"},{"location":"programs/cli/#zshrc","title":"<code>.zshrc</code>","text":"<p>The <code>.zshrc</code> configuration file requires manual editing with Amazon Q, compared to Fig (RIP). Add these lines between the Amazon Q blocks:</p> <pre><code># Executables for Homebrew and Pyenv\nexport PATH=\"$PATH:/opt/homebrew/bin:/opt/homebrew/sbin:$HOME/.pyenv/bin\"\n\n# Activate Pyenv and Python\neval \"$(pyenv init --path)\"\neval \"$(pyenv init -)\"\n\n# Activate Google Cloud SDK completions\nif [ -f /opt/homebrew/share/google-cloud-sdk/completion.zsh.inc ]; then\n    source /opt/homebrew/share/google-cloud-sdk/completion.zsh.inc\nfi\nif [ -f /opt/homebrew/share/google-cloud-sdk/path.zsh.inc ]; then\n    source /opt/homebrew/share/google-cloud-sdk/path.zsh.inc\nfi\n\n# Activate Zsh syntax highlighting. Put this at the very end of the file\nsource /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n</code></pre> <ul> <li> <p>Terminal settings/preferences (personal choice): Ocean_Esh.terminal   1) Open the Terminal, and go to Preferences -&gt; Profiles   2) Hit the three dots in the bottom left corner and click Import...   3) Select the terminal preferences file and set it as the default</p> </li> <li> <p>Hyper settings:</p> <pre><code>hyper i hyper-material-theme\nhyper i hyper-fading-scrollbar\nhyper i hyper-blink\nhyper i hyper-quit\nhyper i default-shell\n</code></pre> </li> </ul>"},{"location":"programs/cli/#verified-git-commits","title":"Verified Git commits","text":"<p>For that sweet Verified mark next to commits on GitHub, the simplest method is to generate a GPG key and associate it with your account. Start with</p> <pre><code>gpg --default-new-key-algo rsa4096 --gen-key\n# Enter real name\n# Enter email address associated with GitHub account\n# Don't enter a passphrase unless you want to type it in every time you commit\n# Enter `o` to finish\n</code></pre> <p>Then view the key with</p> <pre><code>gpg --list-secret-keys --keyid-format=long\n</code></pre> <p>The output will look something like</p> <pre><code>gpg: checking the trustdb\ngpg: marginals needed: 3  completes needed: 1  trust model: pgp\ngpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u\ngpg: next trustdb check due at 2024-12-01\n/Users/username/.gnupg/pubring.kbx\n--------------------------------\nsec   rsa4096/ABC123DEF456GHI 2022-12-02 [SC] [expires: 2024-12-01]\n      JBNM4H5LJK5BKJ4BMNVTBHOI4H55P4BJ5K6L4JKL\nuid                 [ultimate] Real Name &lt;username@domain.com&gt;\n</code></pre> <p>The bit after <code>sec   rsa4096/</code> is what we need next (<code>ABC123DEF456GHI</code>). To show the public key, do</p> <pre><code>gpg --armor --export ABC123DEF456GHI\n</code></pre> <p>which will output something like</p> <pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nAMASSIVEBLOCKOFLETTERSNUMBERSANDSYMBOLS\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre> <p>Remove existing keys and associate this one to your GitHub account with</p> <pre><code>git config --global --unset gpg.format\ngit config --global user.signingkey ABC123DEF456GHI\ngit config --global commit.gpgsign true\n</code></pre> <p>Then copy that public key we generated earlier (in its entirety), and add it to your GitHub account:</p> <ol> <li>Visit https://github.com/settings/gpg/new</li> <li>Add a title</li> <li>Paste the public key</li> <li>Hit Add GPG key</li> </ol> <p>This should apply to GitHub Desktop as well, not just commits on the CLI. Just ensure you're using the same email address for your commits as entered when creating the key. Double check in Preferences -&gt; Git -&gt; Email.</p>"},{"location":"programs/homebrew/","title":"Homebrew","text":"<p>Install Homebrew (an excellent package manager for macOS): https://brew.sh/. This should also install the XCode Command Line Tools which is useful for software development.</p> <p>Once completed, I can use it to install and manage various programs and packages. It should keep them up to date without requiring conscious individual checks, and should install the right versions for my architecture (i.e., Intel x64 or Apple Silicon) and OS. Install the packages with</p> <pre><code># Make directory to store gaming apps\ngames_dir=\"/Applications/Games\"\nmkdir $games_dir\n\n# Formulae\nbrew install bash  # for a newer version than that bundled with macOS\nbrew install emacs  # since it's not provided by default as of macOS Catalina. If I can't run emacs after it's been installed, do 'brew reinstall --cask --no-quarantine emacs'\nbrew install git  # for a newer version than that bundled with macOS\nbrew link --overwrite git  # so it's linked by default instead of the version bundled with macOS\nbrew install gnupg  # GPG key generation utility (for signing Git commits\nbrew install poetry  # for Python project management\nbrew install pyenv  # best way of managing Python installs on Mac\nbrew install tree  # Show directory trees (use `-L &lt;levels&gt;` options to show set number of levels)\nbrew install wget  # for wget command like on linux\nbrew install zsh  # for a newer version than that bundled with macOS\n\n# Casks\nbrew install --cask adobe-acrobat-reader\nbrew install --cask alfred  # suped version of Spotlight\nbrew install --cask amazon-q  # for modern terminal settings, plugin management, etc.\nbrew install --cask android-file-transfer  # For copying files to Oculus Quest\nbrew install --cask ankerwork  # For configuring my webcam\nbrew install --cask bartender  # for menu bar organisation\nbrew install --cask blackhole-64ch  # for BlackHole (audio output from screen recording)\nbrew install --cask discord\nbrew install --cask epic-games --appdir $games_dir\nbrew install --cask fantastical  # Better calendar app than the default\nbrew install --cask filebot --force --no-quarantine  # for batch renaming of files. Additional options required to start up properly\nbrew install --cask folx  # torrent client\nbrew install --cask github  # GitHub Desktop\nbrew install --cask gog-galaxy --appdir $games_dir\nbrew install --cask google-chrome\nbrew install --cask google-drive\nbrew install --cask handbrake  # for re-encoding videos\nbrew install --cask hyper  # a nicer, modern terminal\nbrew install --cask macgpt  # ChatGPT plugin\nbrew install --cask mactex  # for MacTeX distro of TeXLive with GUI applications\nbrew install --cask messenger  # Facebook Messenger\nbrew install --cask microsoft-excel\nbrew install --cask microsoft-powerpoint\nbrew install --cask microsoft-word\nbrew install --cask mimestream  # a modern, macOS-native Gmail client\nbrew install --cask mkvtoolnix  # for quickly adding/removing embedded audio and subtitle tracks from MKV files\nbrew install --cask openemu  # Old video game emulation\nbrew install --cask plex  # Media player client for Plex\nbrew install --cask private-internet-access\nbrew install --cask pycharm  # My favourite IDE at the moment\nbrew install --cask qlvideo  # for QLVideo (thumbnails for mkv and other file formats)\nbrew install --cask raindropio\nbrew install --cask readdle-spark  # For the Spark email client\nbrew install --cask runescape --appdir $games_dir\nbrew install --cask sidequest  # For sideloading more VR content onto Oculus Quest \nbrew install --cask skype\nbrew install --cask steam --appdir $games_dir\nbrew install --cask todoist\nbrew install --cask visual-studio-code  # A good code and text editor supporting many languages\nbrew install --cask vivid  # Unlock higher brightness range on the display\nbrew install --cask vlc\nbrew install --cask whatsapp\nbrew install --cask zoom\n</code></pre> <p>Typically, the <code>--cask</code> option is used when you want to install GUI applications. Certain packages like <code>handbrake</code> can operate solely on the command line. So in that case, just doing <code>brew install handbrake</code> would install the formula (the CLI-only version), where <code>brew install --cask handbrake</code> will install the GUI application that sits in my <code>Applications</code> folder.</p> <p>For any issues with opening these programs, see https://support.apple.com/en-gb/guide/mac-help/mh40616/mac.</p> <p>The manpage is at https://docs.brew.sh/Manpage, containing a bunch of useful commands like <code>autoremove</code> (to remove unused dependencies).</p>"},{"location":"programs/homebrew/#updating","title":"Updating","text":"<p>Upgrade Homebrew packages with</p> <pre><code>brew upgrade\nbrew upgrade --cask\n</code></pre> <p>Casks with auto-update utilities (like a lot of GUI applications) won't be updated when the above commands are run; the built-in updaters will maintain them in those cases. To force them to update with Homebrew, run</p> <pre><code>brew upgrade --greedy\n</code></pre>"},{"location":"programs/homebrew/#viewing","title":"Viewing","text":"<p>Check everything that's installed with</p> <pre><code>brew list\n</code></pre> <p>Check only top-level formulae with</p> <pre><code>brew leaves\n</code></pre> <p>Add the <code>-r</code> option for formulae that were explicitly installed, or <code>-p</code> for formulae installed as a dependency of a cask.</p> <p>Check which formulae and casks are using a specific dependency with</p> <pre><code>brew uses --installed --recursive &lt;dependency&gt;\n</code></pre>"},{"location":"programs/homebrew/#cleanup-and-uninstalling","title":"Cleanup and uninstalling","text":"<p>Homebrew should run a cleanup of caches and old files every so often. For manual scrubbing, run</p> <pre><code>brew cleanup -s --prune all\n</code></pre> <p>Uninstall a formula/cask with</p> <pre><code>brew uninstall &lt;formula/cask&gt;\n</code></pre> <p>Add the <code>--zap</code> option to remove all associated files.</p> <p>Uninstall unused dependencies of formulae/casks with</p> <pre><code>brew autoremove\n</code></pre>"},{"location":"programs/homebrew/#bartender-5-triggers","title":"Bartender 5 triggers","text":"<p>Bartender contains functionality to show a (normally-hidden) menu bar item based on a trigger. These can be on specific WiFi connections, battery percentages, or shell scripts. New triggers can be added in Bartender's settings -&gt; Triggers.</p>"},{"location":"programs/homebrew/#private-internet-access-trigger","title":"Private Internet Access trigger","text":"<p>One thing I would like to be aware of is when my VPN Private Internet Access (PIA) is active. The most robust trigger for this case is a script, pasting the following:</p> <pre><code>PATH=\"$PATH:/usr/local/bin\"\n[[ \"$(piactl get connectionstate)\" != \"Connected\" ]]; echo \"$?\"\n</code></pre> <p>Now it will show the PIA icon when the VPN is connected. An unintuitive subtlety with these shell scripts is that Bartender designates <code>1</code> as True and <code>0</code> as False - the opposite of the Unix default! This is why the operator above is <code>!=</code> instead of <code>==</code>.</p>"},{"location":"programs/ides/","title":"IDEs","text":""},{"location":"programs/ides/#vs-code","title":"VS Code","text":"<p>In Visual Studio Code, the <code>settings.json</code> file can be edited to override some default commands. My current list of installed extensions are</p> <ul> <li>bibtexLanguage</li> <li>GitLens</li> <li>LaTeX Workshop</li> <li>markdownlint</li> <li>Project Dashboard</li> <li>Pylance</li> <li>Python</li> <li>Rainbow CSV</li> <li>Remote - SSH</li> <li>Remote - SSH: Editing Configuration Files</li> <li>Spell Right</li> <li>vscode-icons</li> </ul> <p>and the settings file is vscode_settings.json. Even though it should be backed up to my GitHub account (<code>@eshwen</code>), a cold copy could be handy. Make sure the Python path reflects whatever version I have installed. It can be switched on-the-fly in any case.</p>"},{"location":"programs/latex/","title":"LaTeX","text":""},{"location":"programs/latex/#tex-live","title":"TeX Live","text":"<p>TeX Live is installed under the <code>mactex</code> cask with Homebrew. As well as the actual TeX backend, it may bundle the spelling utility cocoAspell, and fronted GUI applications like BibDesk, TeX Live Utility, LaTeXiT, and TeXShop. Uninstall the latter two, since VS Code is way better than TeXShop, and I've never needed LaTeXiT. For the former three, if they are not installed by default do so with</p> <pre><code>tex_dir=\"/Applications/TeX\"\nmkdir $tex_dir\nbrew install --cask bibdesk --appdir $tex_dir  # for LaTeX bibliography management\nbrew install --cask tex-live-utility --appdir $tex_dir  # for maintaining installed LaTeX packages\n</code></pre> <p>MacTeX/TeX Live installs as root (possibly to avoid large installs and conflicts for multiple users). So if avoiding TeX Live Utility to update packages, I can go via the command line with <code>sudo</code> privileges. Check for outdated packages with</p> <pre><code>sudo tlmgr update --list\n</code></pre> <p>Update the package manager itself with</p> <pre><code>sudo tlmgr update --self\n</code></pre> <p>and then update the packages with</p> <pre><code>sudo tlmgr update --all\n</code></pre>"},{"location":"programs/latex/#garamond-expert","title":"Garamond Expert","text":"<p>My favourite font is Garamond Expert with New TX Math (the LaTeX package <code>garamondx</code> - see here). As well as being visually appealing, it supports bold, italic, and small cap styles that other Garamond variants do not. If compiling a LaTeX document on Overleaf, this should already be installed. However, it is not bundled with TeX Live due to licensing. To circumvent this, follow the instructions at http://tug.org/fonts/getnonfreefonts/:</p> <pre><code>curl --remote-name https://www.tug.org/fonts/getnonfreefonts/install-getnonfreefonts\nsudo texlua install-getnonfreefonts\nsudo getnonfreefonts --sys -a\n</code></pre> <p>If the above doesn't work (sometimes the <code>microtype</code> package fails to map things properly), also try</p> <pre><code>updmap-sys\n</code></pre> <p>Do not run <code>getnonfreefonts</code> with <code>--user</code>, or <code>updmap-user</code>, for the reasons outlined in https://tex.stackexchange.com/a/255711.</p>"},{"location":"programs/programs/","title":"Programs","text":"<p>Here you can find a list of programs that are available in the system. Each program has a description and a list of commands that can be used with it.</p>"},{"location":"programs/programs/#fonts","title":"Fonts","text":"<p>There are some nice fonts I've found over the years in the fonts/ directory. To install them to the system's Font Book, just highlight them all in the Finder and double click.</p>"},{"location":"programs/python/","title":"Python","text":"<p>Apparently, Python won't come bundled with macOS starting with v13. And only Python 2 seems to be bundled with versions as recent as Monterey.</p>"},{"location":"programs/python/#pyenv","title":"pyenv","text":"<p>While Anaconda is a good environment manager, <code>pyenv</code> is the simplest and most lightweight option for pure Python. Once <code>pyenv</code> has been installed with Homebrew, install a recent version of Python with</p> <pre><code>pyenv install &lt;version&gt;\n</code></pre> <p>Multiple installations are supported, so I can have separate Python 2 and Python 3 environments, or even separate Python 3.X ones. Each is bundled with <code>pip</code> for external package dependency management. The active environment can be found with</p> <pre><code>pyenv local\n</code></pre> <p>and can be switched to any other installation (applicable to the active directory) with</p> <pre><code>pyenv local &lt;version&gt;\n</code></pre> <p>Change the global default Python version with</p> <pre><code>pyenv global &lt;version&gt;\n</code></pre>"},{"location":"programs/python/#anaconda","title":"Anaconda","text":"<p>For completeness, below are instructions to install Anaconda with Homebrew:</p> <pre><code>brew install --cask anaconda\nconda init \"$(basename \"${SHELL}\")\"  # If 'conda' executable doesn't work, run $(brew --prefix)/anaconda3/bin/conda\n&lt;exit and reopen shell&gt;\nconda activate\nconda config --set auto_activate_base false\nconda deactivate\n</code></pre> <p>Then, to install the Anaconda Navigator (a GUI for managing conda environments and installing related tools), do</p> <pre><code>conda activate\nconda install -c anaconda anaconda-navigator -y\nconda deactivate\n</code></pre>"},{"location":"programs/python/#dependencies","title":"Dependencies","text":"<p>See https://github.com/eshwen/ds-python-boilerplate for a list of common Python dependencies for data science.</p>"},{"location":"programs/python/#tensorflow","title":"Tensorflow","text":"<p>If <code>pip install tensorflow</code> doesn't work, it may because it does not yet run natively on Apple Silicon. Run the following commands to get a usable installation:</p> <pre><code>pyenv install miniforge3\npyenv local miniforge3\nconda install -c apple tensorflow-deps -y\n\npip install -U pip\npip install tensorflow-macos\npip install tensorflow-metal  # Metal plugin for GPU acceleration\n</code></pre> <p>Then, before using Tensorflow, do either <code>pyenv local miniforge3</code> to activate the environment it's installed in.</p> <p>See also: https://developer.apple.com/metal/tensorflow-plugin/</p>"}]}